<?php

	class extension_stopforumspam extends Extension{
		
		public	$username = 'username';
		public	$email = 'email';
		
		public function about()
		{
			return array('name' => 'Event Filter: Stop Forum Spam',
						 'version' => '1.3',
						 'release-date' => '2011-01-09',
						 'author' => array('name' => 'John Porter',
										   'website' => 'http://designermonkey.co.uk',
										   'email' => 'contact@designermonkey.co.uk'),
						 'description' => 'Allows you to add spam filters to your events.'
				 		);
		}
		
		public function getSubscribedDelegates()
		{
			return array(
						array(
							'page' => '/blueprints/events/new/',
							'delegate' => 'AppendEventFilter',
							'callback' => 'addFilterToEventEditor'
						),
						array(
							'page' => '/blueprints/events/edit/',
							'delegate' => 'AppendEventFilter',
							'callback' => 'addFilterToEventEditor'
						),
						array(
							'page' => '/blueprints/events/new/',
							'delegate' => 'AppendEventFilterDocumentation',
							'callback' => 'addFilterDocumentationToEvent'
						),
						array(
							'page' => '/blueprints/events/edit/',
							'delegate' => 'AppendEventFilterDocumentation',
							'callback' => 'addFilterDocumentationToEvent'
						),
						array(
							'page' => '/frontend/',
							'delegate' => 'EventPreSaveFilter',
							'callback' => 'processEventData'
						),
			);
		}
		
		public function addFilterToEventEditor($context)
		{
			$context['options'][] = array('stopforumspam', @in_array('stopforumspam', $context['selected']) ,'Stop Forum Spam: Check Details.');
		}

		public function addFilterDocumentationToEvent($context)
		{
			if(is_array($context['selected']) && !in_array('stopforumspam', $context['selected'])) return;
			
			$context['documentation'][] = new XMLElement('h3', '\'Stop Forum Spam\' service');
			
			$context['documentation'][] = new XMLElement('p', 'This event filter will check any user registration, or blog/forum comment with the <a href="http://www.stopforumspam.com">Stop Forum Spam</a> service to see if it has been registered as a spammer.');
			
			$context['documentation'][] = new XMLElement('p', 'The following is an example of the XML returned form this filter:');
			$code = '<filter type="stopforumspam" status="passed">username passed spam check</filter>
<filter type="stopforumspam" status="failed">email failed as spam</filter>
<filter type="stopforumspam" status="passed">ipaddress passed spam check</filter>';

			$context['documentation'][] = contentBlueprintsEvents::processDocumentationCode($code);

			$context['documentation'][] = new XMLElement('p', 'The filter will perform an ip address check, and check the posted fields for a username and email (neither field are required). If neither fields are available, the filter will return dependent on the ip address only. The more data provided, the more chance of catching spammers! Note that if one of the three checks fails, the whole event fails. All three are displayed so you can reference which one failed if you wish.');
			
			$context['documentation'][] = new XMLElement('p', 'The filter doesn\'t expect you to provide hidden fields specifically for this service, and will use your standard username and email inputs. If you want to set the names of the fields, they are hardcoded at the top of the extension (this will be updated to provide translations correctly in an update). The IP is generated by the extension for you.');
			
			$context['documentation'][] = new XMLElement('p', 'Example fields used would be:');
			
			$code = '<input name="fields[username]" value="" type="text" />
<input name="fields[email]" value="" type="text" />
';
			$context['documentation'][] = contentBlueprintsEvents::processDocumentationCode($code);
			
		}
		
		public function processEventData($context)
		{
			if(!in_array('stopforumspam', $context['event']->eParamFILTERS)) return;
			
			$mapping = $_POST['fields'];
			$check = array(
						'username' => $mapping[$this->username],
						'email' => $mapping[$this->email],
						'ip' => $_SERVER['REMOTE_ADDR'],
			);
			$mapping = null;
			$result = $this->stopforumspamConnect($check);
			//var_dump($result);die;
			$text = '';
			foreach($result as $key => $value){
				if($key == 'success') continue;
				if($value['appears']){
					$value = false;
				}else{
					$value = true;
				}
				if($text != ''){
					$text = $text.' and '.$key;
				}else{
					$text = $key;
				}
			}
			$context['messages'][] = array('stopforumspam', $value, (!$value ? $text . ' failed as spam' : NULL));
			//var_dump($context['messages']);die;
		}
		
		public function stopforumspamConnect($data)
		{
			if(!is_array($data)) return;
			
			$urloptions = '';
			
			foreach($data as $key => $value){
				if($value) $urloptions .= '&' . $key . '=' . $value;
			}
			$url = 'http://www.stopforumspam.com/api?f=xmldom' . $urloptions;
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, $url);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
			$xml = curl_exec($ch);
			curl_close($ch);
			$ret = simplexml_load_string($xml);
			return $this->objectsIntoArray($ret);
		}
		
		public function objectsIntoArray($data, $skipind = array())
		{
			$array = array();
			if(is_object($data)){
				$data = get_object_vars($data);
			}
			if(is_array($data)){
				foreach($data as $key => $value){
					if (is_object($value) || is_array($value)) {
						$value = $this->objectsIntoArray($value, $skipind);
					}
					if (in_array($key, $skipind)) {
						continue;
					}
					$array[$key] = $value;
				}
			}
			return $array;
		}
	}

